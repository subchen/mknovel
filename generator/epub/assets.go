// Code generated by go-bindata.
// sources:
// template/META-INF/container.xml
// template/OEBPS/content.opf
// template/OEBPS/css/style.css
// template/OEBPS/data/chapter.xhtml
// template/OEBPS/data/copyrights.xhtml
// template/OEBPS/toc.ncx
// template/mimetype
// DO NOT EDIT!

package epub

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMetaInfContainerXml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8e\x4f\x4b\xc5\x30\x10\xc4\xef\xfd\x14\xcb\x5e\xa5\x2f\x7a\x93\xd0\xf4\x81\xe0\x59\xc1\x4f\xb0\xa6\xdb\x67\x30\xd9\x0d\xcd\x46\xea\xb7\x17\xff\xf0\xb0\xc7\x19\x66\xe6\x37\xd3\x79\x2f\x19\x3e\x78\x6b\x49\x25\xe0\xdd\xe9\x16\x81\x25\xea\x92\xe4\x12\xb0\xdb\x3a\xde\xe3\x79\x1e\xa6\xa8\x62\x94\x84\x37\xd8\x4b\x96\x16\xb0\x6f\xe2\x95\x5a\x6a\x5e\xa8\x70\xf3\x16\xbd\x56\x96\x45\x63\x2f\x2c\xe6\x7f\x62\xfe\x5a\xc3\x23\x63\x1e\x00\x00\xa6\x4d\xd5\xd6\x94\xb9\xfd\xea\x83\x07\x6b\xcf\x79\xac\x64\x6f\x01\x9f\x1e\x1f\x9e\x5f\xdc\xf7\x18\x8b\x9d\xb4\xae\x08\x85\x97\x44\xa3\x7d\x56\x0e\x48\xb5\xe6\x14\xc9\x92\x8a\x53\x7e\xad\x6d\xac\x14\xdf\xe9\xc2\x37\x7b\xc9\xe8\xfe\x60\xee\x1f\x6d\x72\xd7\x67\xf3\xf0\x15\x00\x00\xff\xff\xb1\xbf\x74\xc1\x04\x01\x00\x00"

func templateMetaInfContainerXmlBytes() ([]byte, error) {
	return bindataRead(
		_templateMetaInfContainerXml,
		"template/META-INF/container.xml",
	)
}

func templateMetaInfContainerXml() (*asset, error) {
	bytes, err := templateMetaInfContainerXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/META-INF/container.xml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateOebpsContentOpf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x04\x5d\x07\x4b\x69\x2f\x1b\x0a\xdb\xc5\xd0\x5e\x0a\x14\xc5\xb0\x61\x1f\xa0\x48\xb4\xad\xd4\x96\x34\x89\x6e\x9c\x05\xf9\xf7\xc1\x72\xec\xd8\x43\x86\xb5\xb7\x90\x7c\x7c\xef\x91\x54\x9c\xdd\xf7\x6d\x43\xde\xc0\x07\x6d\x4d\x4e\x6f\xd8\x86\x12\x30\xd2\x2a\x6d\xaa\x9c\x76\x58\xa6\x5f\xe8\x7d\x91\x64\x4e\xc8\x57\x51\x01\xe9\xdb\xc6\x84\x9c\xd6\x88\xee\x8e\xf3\xfd\x7e\xcf\xb4\x72\x25\xb3\xbe\xe2\xb7\x9b\xcd\x67\x6e\x5d\x49\x47\xd0\x9d\x92\x33\xce\x75\xbe\x89\x18\x25\x39\x34\xd0\x82\xc1\xc0\x6f\xd8\x0d\xa7\xa4\x33\xfa\x57\x07\xa9\x56\x60\x50\x97\x1a\x7c\x4e\xb7\xd6\xbe\x6a\x45\x2f\xae\x6e\xd9\x86\x16\x09\x21\x84\x64\x2d\xa0\x50\x02\xc5\x87\x34\x46\xac\x75\xe5\x7f\x8c\x8f\x1a\x51\x47\xc9\xbb\x8b\x25\xa2\xd5\xec\xaa\x38\x1e\x09\x7b\x7a\x24\xa7\x53\xc6\x57\xa0\x75\x73\x23\x4c\xd5\x89\x0a\x8a\xdf\x75\xfa\xf0\x12\xa1\x73\x6a\x05\x44\x8d\x0d\x44\xd2\x17\xd1\xc2\x44\x3b\x66\x57\x40\xe9\x41\xa0\xf5\x11\xfa\xb5\xc3\xda\xfa\x09\x3c\x55\x56\xf0\xd0\x6d\x77\x20\x31\xc2\x7f\x8c\xbf\x27\xfc\x54\x5a\xe1\x5d\xb7\x6d\x74\xa8\x61\x14\xf8\x36\x45\x53\xcf\xa5\xbc\xea\x52\x02\x61\xd9\xf0\x28\x70\x9e\x21\xd6\x92\xe3\x31\x25\xba\x24\xec\xc1\xbe\x81\x7f\x6a\x45\x05\x3f\xbf\x3f\x93\xd3\xe9\x42\x33\x9c\x94\x18\xd1\x42\x4e\xe5\x00\xa2\x44\x5a\x83\x60\xf0\x1c\xa7\x7a\xe8\xa2\x84\x8f\x64\x60\xd4\xd4\x9e\xf1\xe9\x39\x14\xc9\xf9\x79\x08\xa3\x4b\x08\xf8\x1e\x5d\x8d\xd0\xc6\xcb\xae\x54\x6a\x0f\x65\x4e\x63\x10\x78\xac\xb0\x9d\xab\x28\x69\x41\x69\x91\xe2\xc1\xc1\xb9\xca\x77\x0e\xaa\x6b\xae\xd6\xe4\x46\xf6\x13\x29\x5a\xc9\x62\xb8\xe4\x12\xce\x35\x5a\x0a\xd4\xd6\xf0\x3e\x55\xb8\x35\xb2\xff\xd4\xb7\x4d\x64\xbe\xe2\x35\x84\x89\x4e\x86\xc0\x03\x1e\x1a\x60\x31\xb9\x24\x45\xe8\x91\xc7\xec\x75\x12\xeb\x0e\x5e\x57\x35\xce\x5c\xc3\x0e\xf9\x25\xcd\xfa\x1a\x07\x0b\xff\x34\x3a\x94\x67\x97\xc3\xfc\x5e\x98\x0a\x08\x7b\xa8\x85\x43\xf0\xcf\x3a\xe0\xf5\x75\xcc\xff\x9e\x95\xf2\x9c\xfd\xb8\xf0\xfa\x39\xcc\xe7\x1f\x13\xc1\x69\x03\x04\xad\x1c\xef\xf0\xd7\x2e\x3c\x94\x44\xab\x71\x97\x8b\x8d\xbc\x7f\xa2\x05\xc1\x62\xae\x6b\xc6\xa2\x91\x22\x49\x32\x7e\xfe\x90\x16\xc9\x9f\x00\x00\x00\xff\xff\xf7\x6c\x57\x38\x7a\x05\x00\x00"

func templateOebpsContentOpfBytes() ([]byte, error) {
	return bindataRead(
		_templateOebpsContentOpf,
		"template/OEBPS/content.opf",
	)
}

func templateOebpsContentOpf() (*asset, error) {
	bytes, err := templateOebpsContentOpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/OEBPS/content.opf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateOebpsCssStyleCss = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x51\x6e\x83\x30\x10\x44\xff\x7d\x8a\x3d\x40\x8d\x4c\xd2\x54\x91\xf9\xe9\x55\x0c\x6c\xc1\xaa\xb1\x2d\xb3\x15\xa1\x15\x77\xaf\x82\x21\x81\x80\xda\x7c\x7a\xe4\x9d\xd9\x79\x9b\xbb\xb2\x87\x1f\x06\x00\xd0\xa8\x50\x69\x2b\x21\x15\xfe\x92\x8d\xca\x87\xb3\xc4\x5b\xfd\x8d\x12\xd2\x44\x60\x13\xd5\xce\x85\x92\x77\x41\x79\x09\x79\x40\xf5\xc9\xaf\x42\xc6\x06\xc6\xde\xbd\xaa\x70\xe5\xc6\x73\x47\xe4\x1a\x09\x27\x4f\xd9\x52\x27\xe7\x27\x71\x60\xec\xcb\xbc\x80\xd1\xd3\xa0\xd1\x2d\xf1\x96\x7a\x83\x9c\x7a\x8f\x12\xac\xb3\x98\xad\x36\x14\xf1\xe9\x55\x59\x6a\x5b\x8d\xef\x81\xb1\x3a\x7d\x28\x22\x92\x33\x36\xf3\xe7\x55\x97\xb7\xb9\xcb\xa8\x76\xa8\xab\x9a\x24\xe4\xce\xc4\x1e\xf5\xe1\x69\xa7\xc3\xdf\x4e\x7e\x32\x22\xbc\x10\xd7\xb6\x44\x4b\x12\x6e\x33\x46\x5b\xe4\xf5\x34\x93\x26\xa7\x59\x5f\x32\x12\xd9\x1e\x4e\x11\x3f\x0f\x8c\x25\x85\xf3\x7d\xb8\x5a\xb4\x70\x23\x30\xc6\x29\xa3\x2b\x2b\xa1\x40\x4b\x18\xb6\xc6\xc7\x87\xb4\xbb\xf5\x7d\x3f\x24\xc2\xc0\x5b\xaf\x8a\xc8\x39\x79\x8d\xa9\xab\xd0\xe3\x3f\xa1\x0b\x5e\x23\xc7\x1d\x5e\xd6\x85\x46\x99\x67\xcb\x9f\xb7\x4b\xec\x72\xde\xde\x4b\xc4\xcb\x0f\xec\x37\x00\x00\xff\xff\x7f\x97\x2a\x27\xf7\x02\x00\x00"

func templateOebpsCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_templateOebpsCssStyleCss,
		"template/OEBPS/css/style.css",
	)
}

func templateOebpsCssStyleCss() (*asset, error) {
	bytes, err := templateOebpsCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/OEBPS/css/style.css", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateOebpsDataChapterXhtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x8f\x94\x40\x10\x85\xef\x93\xcc\x7f\x28\xfb\x4e\x97\xec\x5e\x9c\xb5\x7b\x36\x91\xd9\x44\x93\x71\xdc\x18\x8c\x7a\x44\xa8\x9d\x26\x36\x0d\xd2\xb5\x33\x20\xe1\xbf\x9b\x06\x54\x4c\xbc\xd5\x83\xf7\xbd\x57\xd5\xea\xbe\xab\x2c\x5c\xa8\xf5\x65\xed\xb4\x88\xe5\x4b\x01\xe4\xf2\xba\x28\xdd\x59\x8b\x67\x7e\x8a\x5e\x89\xfb\xfd\x76\xa3\x5e\x1c\x3e\x24\xe9\xd7\xc7\x07\x30\x5c\x59\x78\xfc\xf4\xe6\xf8\x2e\x01\x11\x21\x7e\xbe\x4d\x10\x0f\xe9\x01\xbe\xbc\x4d\xdf\x1f\x21\x96\x31\xe2\xc3\x49\x80\x30\xcc\xcd\x1d\xe2\xf5\x7a\x95\xd7\x5b\x59\xb7\x67\x4c\x3f\x62\x17\xf0\x38\x0e\xc0\xef\x59\x16\x5c\x88\x50\x31\x25\x77\x95\x75\x5e\xff\x07\x8e\x77\xbb\xdd\x8c\x88\x60\xba\xb3\x59\xd8\xf0\xa7\x89\x92\x53\xa0\x01\x00\x94\xa1\xac\x58\xe6\x49\x57\xc4\x19\x84\xa8\x88\x7e\x3c\x97\x17\x2d\x92\xda\x31\x39\x8e\xd2\xbe\x21\x01\xf9\xac\xb4\x60\xea\x18\x43\xf4\x6b\xc8\x4d\xd6\x7a\x62\x3d\x9f\x0e\xb8\x8e\xe3\x92\x2d\xed\x87\x01\xe4\x29\xab\x08\xc6\x51\xe1\xfc\x69\xe5\xb1\xa5\xfb\x0e\xa6\xa5\x27\x2d\xa4\xc4\xdc\x7b\xf4\xdc\x5b\x92\xb9\xf7\x02\xb8\x6f\x68\x69\x9b\x74\x4b\x56\x8b\xe9\xbf\x37\x44\xfc\xb7\x4e\xe1\xea\x14\xf5\xad\x2e\xfa\x75\x87\xb9\xf9\x77\x09\x73\xb3\xdf\x6e\x86\x21\x82\x36\x73\x67\x02\x99\x52\xc7\xc7\xd2\x91\x87\x71\x5c\x61\xcd\x44\x4d\x44\xb3\x00\xe4\x8a\x3f\x1e\x85\x4b\x8f\x9a\x9e\x62\xbf\xdd\xfc\x0a\x00\x00\xff\xff\x26\x4d\xa8\x57\x1d\x02\x00\x00"

func templateOebpsDataChapterXhtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateOebpsDataChapterXhtml,
		"template/OEBPS/data/chapter.xhtml",
	)
}

func templateOebpsDataChapterXhtml() (*asset, error) {
	bytes, err := templateOebpsDataChapterXhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/OEBPS/data/chapter.xhtml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateOebpsDataCopyrightsXhtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x92\xdf\x6b\xd3\x50\x14\xc7\xdf\x0b\xfd\x1f\x8e\xf7\x3d\xb9\x86\xbe\xb8\x99\x64\x68\x3b\x50\x98\xb5\x68\x45\x7d\xcc\x92\xdb\xde\x60\x9a\xc4\xdc\xdb\x5f\x96\x41\x99\x0c\x3a\x28\xc5\x17\x61\xcc\x4e\x1f\x86\x7d\x72\x6e\xc2\x50\x3a\x3b\xff\x19\x93\xac\x7b\xea\xbf\x20\x37\xa9\x5d\x75\x7b\xbb\x27\xf9\x7c\xce\xf9\xde\xc3\x55\xd7\x5a\x35\x07\x1a\x24\x60\xb6\xe7\x6a\x48\x91\x6f\x23\x20\xae\xe9\x59\xb6\x5b\xd5\x50\x9d\x57\xa4\x3b\x68\x4d\xcf\x66\xd4\x5b\x85\xc7\xf9\xf2\xcb\xd2\x3a\x50\x5e\x73\xa0\xf4\xec\xfe\xc6\xc3\x3c\x20\x09\xe3\xe7\xb9\x3c\xc6\x85\x72\x01\x5e\x3c\x28\x3f\xda\x00\x45\x56\x30\x5e\x2f\x22\x40\x94\x73\x7f\x15\xe3\x66\xb3\x29\x37\x73\xb2\x17\x54\x71\xf9\x09\x6e\x09\x5d\x51\x84\xf0\xf7\x2c\x5b\xdc\x42\x62\x44\xd2\xb9\x55\x73\x5c\xa6\xdd\x20\x2b\x2b\x2b\x2b\xa9\x82\x04\xb4\xea\x18\x22\xe1\x1b\x2a\xe5\x8b\xc2\x06\x00\x50\x29\x31\xac\xf9\x39\xa9\x6b\x84\x1b\x20\x5a\x49\xe4\x75\xdd\x6e\x68\x28\xef\xb9\x9c\xb8\x5c\x2a\xb7\x7d\x82\xc0\x4c\x2b\x0d\x71\xd2\xe2\x58\xb4\xbe\x0b\x26\x35\x02\x46\xb8\x96\x5e\x1d\xf0\x72\x3b\x6e\x73\x87\xe8\x9d\x0e\xc8\x45\xa3\x46\x60\x6b\x4b\xc5\xe9\xa7\x25\xc6\xb1\xdd\x57\x40\x03\x52\xd1\x90\x2c\x63\x93\x31\xcc\x78\xdb\x21\xb2\xc9\x18\x02\xde\xf6\xc9\x7c\x5a\x52\x07\xc4\xd1\x50\xf2\x9f\x51\x42\xf8\xd5\x38\x15\x2f\x5d\x45\xdd\xf4\xac\xf6\xf2\x0c\xcb\x6e\x80\xe9\x18\x8c\x69\xc8\xf4\xfc\x76\x60\x57\x29\x67\x68\x89\x48\x97\xa1\xfc\x1b\x95\x2a\xd7\x88\x5c\x42\xdc\xab\x73\xea\x05\x29\x93\xd3\xb3\x99\xff\x28\x5f\x8f\x0e\x4f\xe2\xbd\xc1\x6c\xb2\x1f\x0f\xbf\x84\xe3\xd1\xc5\x6e\x2f\x3e\x78\x1b\x7d\xfb\x18\x9e\x0d\xa2\xc1\xa7\xf0\x7c\x38\xed\xee\xcc\x26\xfd\x68\xb4\x7d\x39\xec\x46\x5f\xfb\xf1\xfb\xd3\xcb\xbd\x9d\xe9\xf1\xcf\x94\x9f\x4d\xfa\xd3\xe3\x1f\xd3\xd3\xa3\x70\x7c\x12\x1f\x1d\x5e\xec\xf6\xa2\x0f\xbf\xc2\xf1\xe8\x77\x77\x5b\xc5\xbe\x9e\xcd\x74\x3a\x12\xd8\x15\x90\x9f\x7a\xf5\xc0\x14\x61\xaf\x25\x88\x0f\x3e\xc7\x67\xef\x66\x93\x7d\x91\x77\x81\x5d\xd9\xc4\xb5\x6e\xd2\xa2\xde\xf7\xf0\x7c\x38\xd7\x4a\xf5\x4d\xc7\x66\x94\x04\x0b\x73\x41\x62\xcb\x6e\x2c\x36\x3f\xdf\xb6\x9a\x3c\x08\x3d\x9b\xf9\x13\x00\x00\xff\xff\xd5\x5f\xeb\x0f\x23\x03\x00\x00"

func templateOebpsDataCopyrightsXhtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateOebpsDataCopyrightsXhtml,
		"template/OEBPS/data/copyrights.xhtml",
	)
}

func templateOebpsDataCopyrightsXhtml() (*asset, error) {
	bytes, err := templateOebpsDataCopyrightsXhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/OEBPS/data/copyrights.xhtml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateOebpsTocNcx = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\xc1\x6e\xd3\x40\x10\x86\xef\x79\x8a\xd1\xde\xe3\x4d\x40\xa0\x52\xad\x5d\xa1\x72\x41\x2a\xa5\x07\x5e\x60\xe2\x1d\xec\x95\xec\x59\x6b\x3d\x4e\x1c\x22\x1f\x10\x17\x78\x08\x0e\x3c\x01\x8f\xc0\xcb\xa0\xf2\x1a\xc8\x4e\xd2\xb8\x22\x09\xea\x2d\x99\x99\xef\x1f\x7f\xbb\xb6\xb9\x6a\xcb\x02\x96\x14\x6a\xe7\x39\x56\xf3\x68\xa6\x80\x38\xf5\xd6\x71\x16\xab\x46\x3e\x4e\x2f\xd4\x55\x32\x31\x9c\xb6\xd0\x96\x05\xd7\xb1\xca\x45\xaa\x4b\xad\x57\xab\x55\x64\xd1\xd5\xeb\xc8\x87\x4c\x7f\x7a\xfe\xea\xe2\xa5\x7e\x36\x9b\xbd\xd0\x9c\xb6\x5a\x1d\x22\xfb\xda\x74\xae\x92\x09\x00\x80\xc9\x09\xed\xf6\xe7\xf0\xb7\x24\x41\x60\x2c\x29\x56\x56\x16\x97\x8d\xb3\x0a\x52\xcf\x42\x2c\xb1\xda\x6c\x20\x7a\xfb\x06\xba\x4e\x81\x3e\xcd\x58\xaa\x24\x1f\x51\xf3\xb3\xd3\xe2\x05\x8b\x3b\xcc\xe8\xda\x37\x2c\x23\x6c\x76\x16\x2b\xb1\xed\xa1\xdb\xa6\x5c\x50\x38\x4a\x19\x7d\x50\x33\xd6\xa7\x1f\x9c\x14\x34\x0a\x14\x6a\x25\xe9\x8d\x6e\xb1\x24\xe8\x3a\xa3\x87\xca\x8e\x7d\x0c\xf4\xfc\xeb\x46\x72\x1f\x8e\x05\x6c\x3b\xc7\x22\xc6\x8c\x61\x5c\xbe\xc3\x6a\x14\xc0\xb8\xbc\xf3\x8e\x05\x9c\x8d\x95\xf8\x54\x41\x55\xe0\xfa\x7d\xb0\x14\x7a\x91\xc3\xe4\x7e\xfa\x06\x17\x54\x24\xdb\xc5\x7f\xbe\x7d\xbd\xff\xfe\xe5\xf7\xaf\x1f\xf7\x9f\x7f\xee\xf6\x1a\xfd\x30\xf3\x18\xdd\x9d\x0e\xd4\x21\x8d\x95\x45\x41\x9d\xfa\x6a\x1d\x5c\x96\x4b\x1d\xb5\xb9\x94\x85\x1a\x1f\xb5\xde\x3f\x58\x32\xd9\x6c\xa6\x10\x90\x33\x82\xe8\x3a\xc7\x4a\x28\xdc\xb8\x5a\xa0\xeb\x4e\x58\x8c\xde\x90\x91\xcb\x50\x65\x4b\x6d\xdf\x38\xaf\xf5\xef\x85\x3c\xc1\xea\x61\xfb\xff\xa5\x88\xed\xde\x62\x68\x0d\x37\x63\xfa\x4f\x25\x99\xfc\x0d\x00\x00\xff\xff\x18\x16\x85\xc1\x83\x03\x00\x00"

func templateOebpsTocNcxBytes() ([]byte, error) {
	return bindataRead(
		_templateOebpsTocNcx,
		"template/OEBPS/toc.ncx",
	)
}

func templateOebpsTocNcx() (*asset, error) {
	bytes, err := templateOebpsTocNcxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/OEBPS/toc.ncx", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateMimetype = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2c\x28\xc8\xc9\x4c\x4e\x2c\xc9\xcc\xcf\xd3\x4f\x2d\x28\x4d\xd2\xae\xca\x2c\x00\x04\x00\x00\xff\xff\x6f\x61\xab\x2c\x14\x00\x00\x00"

func templateMimetypeBytes() ([]byte, error) {
	return bindataRead(
		_templateMimetype,
		"template/mimetype",
	)
}

func templateMimetype() (*asset, error) {
	bytes, err := templateMimetypeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/mimetype", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/META-INF/container.xml": templateMetaInfContainerXml,
	"template/OEBPS/content.opf": templateOebpsContentOpf,
	"template/OEBPS/css/style.css": templateOebpsCssStyleCss,
	"template/OEBPS/data/chapter.xhtml": templateOebpsDataChapterXhtml,
	"template/OEBPS/data/copyrights.xhtml": templateOebpsDataCopyrightsXhtml,
	"template/OEBPS/toc.ncx": templateOebpsTocNcx,
	"template/mimetype": templateMimetype,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"META-INF": &bintree{nil, map[string]*bintree{
			"container.xml": &bintree{templateMetaInfContainerXml, map[string]*bintree{}},
		}},
		"OEBPS": &bintree{nil, map[string]*bintree{
			"content.opf": &bintree{templateOebpsContentOpf, map[string]*bintree{}},
			"css": &bintree{nil, map[string]*bintree{
				"style.css": &bintree{templateOebpsCssStyleCss, map[string]*bintree{}},
			}},
			"data": &bintree{nil, map[string]*bintree{
				"chapter.xhtml": &bintree{templateOebpsDataChapterXhtml, map[string]*bintree{}},
				"copyrights.xhtml": &bintree{templateOebpsDataCopyrightsXhtml, map[string]*bintree{}},
			}},
			"toc.ncx": &bintree{templateOebpsTocNcx, map[string]*bintree{}},
		}},
		"mimetype": &bintree{templateMimetype, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

